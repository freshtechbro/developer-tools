import { jest } from "@jest/globals";
import { webSearchTool } from "../web-search.js";
import { config } from "../../../config/index.js";
import axios from "axios";
jest.mock("axios");
const mockedAxios = jest.mocked(axios);
jest.mock("../../../config/index.js", () => ({ config: { env: "test", perplexityApiKey: undefined, logLevel: "info" } }));
jest.mock("../../../utils/logger.js", () => ({ logger: { info: jest.fn(), warn: jest.fn(), error: jest.fn(), debug: jest.fn() } }));
describe("Web Search Tool", () => { beforeEach(() => { jest.clearAllMocks(); }); describe("when PERPLEXITY_API_KEY is not provided", () => { it("should return mock results in test environment", async () => { const request = { query: "test query" }; const result = await webSearchTool.execute(request); expect(result).toEqual({ searchResults: "Mock search results for testing" }); expect(mockedAxios.post).not.toHaveBeenCalled(); }); }); describe("when PERPLEXITY_API_KEY is provided", () => { beforeEach(() => { config.perplexityApiKey = "test-api-key"; }); it("should make API call and return results", async () => { const mockResponse = { data: { choices: [{ message: { content: "API search results" } }] } }; mockedAxios.post.mockResolvedValueOnce(mockResponse); const request = { query: "test query" }; const result = await webSearchTool.execute(request); expect(result).toEqual({ searchResults: "API search results" }); expect(mockedAxios.post).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({ messages: [{ role: "user", content: "test query" }] }), expect.objectContaining({ headers: { "Authorization": "Bearer test-api-key" } })); }); it("should handle API errors gracefully", async () => { const mockError = { response: { data: { error: "API Error" } } }; mockedAxios.post.mockRejectedValueOnce(mockError); const request = { query: "test query" }; await expect(webSearchTool.execute(request)).rejects.toThrow("Web search failed: API Error"); }); it("should validate request schema", async () => { const invalidRequest = { query: "" }; await expect(webSearchTool.execute(invalidRequest)).rejects.toThrow("Search query is required"); }); it("should handle saving results to file when requested", async () => { const mockResponse = { data: { choices: [{ message: { content: "API search results" } }] } }; mockedAxios.post.mockResolvedValueOnce(mockResponse); const request = { query: "test query", saveToFile: true }; const result = await webSearchTool.execute(request); expect(result).toMatchObject({ searchResults: "API search results", savedToFile: expect.stringContaining("web-search-") }); }); }); });
