This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-21T02:04:12.074Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/capabilities/resources/
src/config/
src/utils/
local-research/implementation-plan.md
local-research/mcp-implementation-research.md
package.json
src/capabilities/tools/web-search.js
src/capabilities/tools/web-search.ts
src/server.js
src/server.ts
src/test-client.js
src/test-client.ts
src/test-setup.js
src/test-setup.mjs
src/test-setup.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="local-research/implementation-plan.md">
Packing repository using repomix...
</file>

<file path="local-research/mcp-implementation-research.md">
Querying Perplexity AI using sonar-pro for: 1. What are the best practices for implementing transport layers in MCP servers? 2. What are the recommended security measures for MCP server implementations? 3. What are the optimal caching and rate limiting strategies for external API calls in MCP servers? 4. What are the recommended testing approaches for MCP server capabilities? 5. What are the best practices for error handling and logging in MCP servers? 6. What are the recommended scalability patterns for MCP server implementations?
1. Best practices for implementing transport layers in MCP servers:
- Use layered architecture with clear separation between client/server, session, and transport layers[1].
- Implement different transports for various use cases: STDIO for in-process communication, SSE for HTTP-based communication[1].
- Handle JSON-RPC message serialization/deserialization in the transport layer[1].
- Ensure proper connection establishment, protocol compatibility checks, and capability negotiation[1].

2. Recommended security measures for MCP server implementations:
- Implement strict input validation and sanitization[4].
- Use command whitelisting and flag validation for CLI-based servers[2].
- Prevent path traversal and shell injection attacks[2].
- Implement execution timeouts and command length limits[2].
- Use TLS encryption for API endpoints, especially in management networks[7].
- Employ access controls and proper authentication mechanisms[7].
- Use IDS/IPS for admin networks to detect anomalies[7].

3. Optimal caching and rate limiting strategies for external API calls:
- Implement token bucket algorithm for rate limiting[3]:
```csharp
builder.Services.AddRateLimiter(rateLimiterOptions => {
  options.TokenLimit = 1000;
  options.ReplenishmentPeriod = TimeSpan.FromHours(1);
  options.TokensPerPeriod = 700;
  options.AutoReplenishment = true;
});
```
- Use sliding window rate limiting for more precise control[9].
- Implement IP-based rate limiting to prevent abuse[9].
- Use distributed caching for scalability.

4. Recommended testing approaches for MCP server capabilities:
- Use the MCP Inspector tool for systematic testing[4].
- Test core features first, then add edge cases[4].
- Verify error handling and check performance[4].
- Implement a systematic approach: test core features, add edge cases, verify error handling, check performance[4].
- Use the Inspector during development for quick iteration[5].

5. Best practices for error handling and logging in MCP servers:
- Implement structured logging with consistent formats, context, and timestamps[5].
- Log stack traces, error context, and track error patterns[5].
- Use server-side logging to stderr for local transports[5].
- Send log message notifications to clients:
```python
server.request_context.session.send_log_message(
  level="info",
  data="Server started successfully"
)
```
- Log important events: initialization, resource access, tool execution, errors, performance metrics[5].

6. Recommended scalability patterns for MCP server implementations:
- Use asynchronous operations for improved concurrency[1].
- Implement proper connection management and cleanup[4].
- Use load balancing for distributing requests[7].
- Employ horizontal scaling by adding more server instances.
- Implement efficient resource management and monitoring[4].
</file>

<file path="package.json">
{
  "name": "mcp-server",
  "version": "1.0.0",
  "description": "A beginner-friendly MCP server implementation",
  "type": "module",
  "main": "dist/server.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/server.js",
    "dev": "ts-node --esm src/server.ts",
    "test": "node src/test-setup.mjs"
  },
  "keywords": [
    "mcp",
    "server",
    "model-context-protocol"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@modelcontextprotocol/sdk": "1.2.0",
    "@octokit/rest": "19.0.13",
    "axios": "1.6.5",
    "dotenv": "16.3.1",
    "playwright": "1.41.2",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "20.11.5",
    "ts-node": "10.9.2",
    "typescript": "5.3.3"
  }
}
</file>

<file path="src/capabilities/tools/web-search.js">
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webSearchTool = void 0;
const axios_1 = __importDefault(require("axios"));
const dotenv_1 = __importDefault(require("dotenv"));
// Load environment variables
dotenv_1.default.config();
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
exports.webSearchTool = {
    name: 'web-search',
    version: '0.1.0',
    description: 'Performs a web search using Perplexity AI.',
    execute: (request) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        if (!PERPLEXITY_API_KEY) {
            throw new Error("Perplexity API key is not set in environment variables (PERPLEXITY_API_KEY)");
        }
        const { query, saveTo } = request;
        if (!query) {
            throw new Error("Search query is required.");
        }
        try {
            console.log(`🔍 Performing web search: "${query}"`);
            const response = yield axios_1.default.post(PERPLEXITY_API_URL, {
                model: "pplx-7b-online",
                messages: [{ role: "user", content: query }]
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${PERPLEXITY_API_KEY}`
                }
            });
            const searchResults = ((_b = (_a = response.data.choices[0]) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.content) || "No results found.";
            // If saveTo is specified, save results to file
            if (saveTo) {
                const fs = yield Promise.resolve().then(() => __importStar(require('fs/promises')));
                yield fs.writeFile(saveTo, searchResults, 'utf-8');
                console.log(`✅ Results saved to: ${saveTo}`);
                return { searchResults, savedToFile: saveTo };
            }
            return { searchResults };
        }
        catch (error) {
            console.error("❌ Error during web search:", error);
            if (axios_1.default.isAxiosError(error)) {
                throw new Error(`Web search failed: ${((_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.error) || error.message}`);
            }
            throw new Error(`Web search failed: ${error}`);
        }
    }),
    requestSchema: {
        type: 'object',
        properties: {
            query: {
                type: 'string',
                description: 'The search query.'
            },
            saveTo: {
                type: 'string',
                description: 'Optional file path to save the search results.'
            }
        },
        required: ['query']
    },
    responseSchema: {
        type: 'object',
        properties: {
            searchResults: {
                type: 'string',
                description: 'Web search results.'
            },
            savedToFile: {
                type: 'string',
                description: 'Path to the file where results were saved, if applicable.'
            }
        },
        required: ['searchResults']
    }
};
</file>

<file path="src/capabilities/tools/web-search.ts">
import axios from 'axios';
import dotenv from 'dotenv';
// Load environment variables
dotenv.config();
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";
const PERPLEXITY_API_KEY = process.env.PERPLEXITY_API_KEY;
interface WebSearchRequest {
    query: string;
    saveTo?: string;
}
interface WebSearchResponse {
    searchResults: string;
    savedToFile?: string;
}
export const webSearchTool = {
    name: 'web-search',
    version: '0.1.0',
    description: 'Performs a web search using Perplexity AI.',
    execute: async (request: WebSearchRequest): Promise<WebSearchResponse> => {
        if (!PERPLEXITY_API_KEY) {
            throw new Error("Perplexity API key is not set in environment variables (PERPLEXITY_API_KEY)");
        }
        const { query, saveTo } = request;
        if (!query) {
            throw new Error("Search query is required.");
        }
        try {
            console.log(`🔍 Performing web search: "${query}"`);
            const response = await axios.post(PERPLEXITY_API_URL, {
                model: "pplx-7b-online",
                messages: [{ role: "user", content: query }]
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${PERPLEXITY_API_KEY}`
                }
            });
            const searchResults = response.data.choices[0]?.message?.content || "No results found.";
            // If saveTo is specified, save results to file
            if (saveTo) {
                const fs = await import('fs/promises');
                await fs.writeFile(saveTo, searchResults, 'utf-8');
                console.log(`✅ Results saved to: ${saveTo}`);
                return { searchResults, savedToFile: saveTo };
            }
            return { searchResults };
        } catch (error) {
            console.error("❌ Error during web search:", error);
            if (axios.isAxiosError(error)) {
                throw new Error(`Web search failed: ${error.response?.data?.error || error.message}`);
            }
            throw new Error(`Web search failed: ${error}`);
        }
    },
    requestSchema: {
        type: 'object',
        properties: {
            query: { 
                type: 'string', 
                description: 'The search query.' 
            },
            saveTo: { 
                type: 'string', 
                description: 'Optional file path to save the search results.' 
            }
        },
        required: ['query']
    },
    responseSchema: {
        type: 'object',
        properties: {
            searchResults: { 
                type: 'string', 
                description: 'Web search results.' 
            },
            savedToFile: { 
                type: 'string', 
                description: 'Path to the file where results were saved, if applicable.' 
            }
        },
        required: ['searchResults']
    }
};
</file>

<file path="src/server.js">
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("@modelcontextprotocol/sdk/server/index.js");
const stdio_js_1 = require("@modelcontextprotocol/sdk/server/stdio.js");
const web_search_js_1 = require("./capabilities/tools/web-search.js");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log("Starting MCP server...");
            const server = new index_js_1.Server({
                name: "cursor-tools-mcp-server",
                version: "0.1.0",
                description: "MCP server mimicking cursor-tools functionalities."
            }, {
                capabilities: {
                    resources: {}, // Resources will be defined here
                    tools: {
                        'web-search': web_search_js_1.webSearchTool
                    }
                }
            });
            const transport = new stdio_js_1.StdioServerTransport();
            console.log("Connecting to transport...");
            yield server.connect(transport);
            console.log("✅ MCP Server started using stdio transport.");
            console.log("Available tools:");
            console.log("  - web-search: Perform web searches using Perplexity AI");
        }
        catch (error) {
            console.error("❌ Server failed to start:", error);
            process.exit(1);
        }
    });
}
// Handle process termination
process.on('SIGINT', () => {
    console.log("\nShutting down MCP server...");
    process.exit(0);
});
process.on('SIGTERM', () => {
    console.log("\nShutting down MCP server...");
    process.exit(0);
});
// Start the server
main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
});
</file>

<file path="src/server.ts">
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { webSearchTool } from './capabilities/tools/web-search.js';
async function main() {
    try {
        console.log("Starting MCP server...");
        const server = new Server({
            name: "cursor-tools-mcp-server",
            version: "0.1.0",
            description: "MCP server mimicking cursor-tools functionalities."
        }, {
            capabilities: {
                resources: {}, // Resources will be defined here
                tools: {
                    'web-search': webSearchTool
                }
            }
        });
        const transport = new StdioServerTransport();
        console.log("Connecting to transport...");
        await server.connect(transport);
        console.log("✅ MCP Server started using stdio transport.");
        console.log("Available tools:");
        console.log("  - web-search: Perform web searches using Perplexity AI");
    } catch (error) {
        console.error("❌ Server failed to start:", error);
        process.exit(1);
    }
}
// Handle process termination
process.on('SIGINT', () => {
    console.log("\nShutting down MCP server...");
    process.exit(0);
});
process.on('SIGTERM', () => {
    console.log("\nShutting down MCP server...");
    process.exit(0);
});
// Start the server
main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
});
</file>

<file path="src/test-client.js">
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("@modelcontextprotocol/sdk/client/index.js");
const stdio_js_1 = require("@modelcontextprotocol/sdk/client/stdio.js");
const zod_1 = require("zod");
// Define response schema
const WebSearchResponseSchema = zod_1.z.object({
    result: zod_1.z.object({
        searchResults: zod_1.z.string(),
        savedToFile: zod_1.z.string().optional()
    })
});
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        // Initialize transport with required parameters
        const transport = new stdio_js_1.StdioClientTransport({
            command: 'node',
            args: ['dist/server.js']
        });
        const client = new index_js_1.Client({
            name: "test-client",
            version: "0.1.0"
        }, {
            capabilities: {}
        });
        try {
            console.log("Connecting to MCP server...");
            yield client.connect(transport);
            console.log("✅ Connected to MCP server\n");
            // Test web search
            console.log("Testing web search tool...");
            const response = yield client.request({
                method: "tool/execute",
                params: {
                    toolName: 'web-search',
                    version: '0.1.0',
                    arguments: {
                        query: "What are the latest developments in AI?",
                        saveTo: "local-research/ai-developments.md"
                    }
                }
            }, WebSearchResponseSchema);
            console.log("\nWeb Search Results:");
            console.log("------------------");
            console.log(response.result.searchResults);
            if (response.result.savedToFile) {
                console.log(`\nResults saved to: ${response.result.savedToFile}`);
            }
        }
        catch (error) {
            console.error("❌ Error:", error);
        }
        finally {
            console.log("\nClosing client connection...");
            client.close();
        }
    });
}
main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
});
</file>

<file path="src/test-client.ts">
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import { z } from 'zod';
// Define response schema
const WebSearchResponseSchema = z.object({
    result: z.object({
        searchResults: z.string(),
        savedToFile: z.string().optional()
    })
});
async function main() {
    // Initialize transport with required parameters
    const transport = new StdioClientTransport({
        command: 'node',
        args: ['dist/server.js']
    });
    const client = new Client({
        name: "test-client",
        version: "0.1.0"
    }, {
        capabilities: {}
    });
    try {
        console.log("Connecting to MCP server...");
        await client.connect(transport);
        console.log("✅ Connected to MCP server\n");
        // Test web search
        console.log("Testing web search tool...");
        const response = await client.request({
            method: "tool/execute",
            params: {
                toolName: 'web-search',
                version: '0.1.0',
                arguments: {
                    query: "What are the latest developments in AI?",
                    saveTo: "local-research/ai-developments.md"
                }
            }
        }, WebSearchResponseSchema);
        console.log("\nWeb Search Results:");
        console.log("------------------");
        console.log(response.result.searchResults);
        if (response.result.savedToFile) {
            console.log(`\nResults saved to: ${response.result.savedToFile}`);
        }
    } catch (error) {
        console.error("❌ Error:", error);
    } finally {
        console.log("\nClosing client connection...");
        client.close();
    }
}
main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
});
</file>

<file path="src/test-setup.js">
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("@modelcontextprotocol/sdk/server/index.js");
const playwright_1 = require("playwright");
const rest_1 = require("@octokit/rest");
const axios_1 = __importDefault(require("axios"));
const dotenv_1 = __importDefault(require("dotenv"));
function testSetup() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log('🔍 Starting dependency verification...\n');
            // Test dotenv first to load environment variables
            dotenv_1.default.config();
            console.log('✅ dotenv loaded successfully');
            // Test MCP SDK
            const server = new index_js_1.Server({
                name: "test-server",
                version: "1.0.0"
            }, {
                capabilities: {
                    resources: {},
                    tools: {}
                }
            });
            console.log('✅ MCP SDK initialized successfully');
            // Test Playwright
            console.log('\n🌐 Testing browser automation...');
            const browser = yield playwright_1.chromium.launch();
            yield browser.close();
            console.log('✅ Playwright working correctly');
            // Test Octokit
            console.log('\n📦 Testing GitHub integration...');
            const octokit = new rest_1.Octokit();
            const { status } = yield octokit.rest.meta.root();
            console.log(`✅ Octokit connected successfully (status: ${status})`);
            // Test Axios
            console.log('\n🔌 Testing HTTP client...');
            const response = yield axios_1.default.get('https://api.github.com');
            console.log(`✅ Axios working correctly (status: ${response.status})`);
            console.log('\n✨ All dependencies verified successfully!');
        }
        catch (error) {
            console.error('\n❌ Setup test failed:', error);
            process.exit(1);
        }
    });
}
testSetup();
</file>

<file path="src/test-setup.mjs">
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { chromium } from 'playwright';
import { Octokit } from '@octokit/rest';
import axios from 'axios';
import dotenv from 'dotenv';

async function testSetup() {
  try {
    console.log('🔍 Starting dependency verification...\n');

    // Test dotenv first to load environment variables
    dotenv.config();
    console.log('✅ dotenv loaded successfully');

    // Test MCP SDK
    const server = new Server({
      name: "test-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {},
        tools: {}
      }
    });
    console.log('✅ MCP SDK initialized successfully');

    // Test Playwright
    console.log('\n🌐 Testing browser automation...');
    const browser = await chromium.launch();
    await browser.close();
    console.log('✅ Playwright working correctly');

    // Test Octokit
    console.log('\n📦 Testing GitHub integration...');
    const octokit = new Octokit();
    const { status } = await octokit.rest.meta.root();
    console.log(`✅ Octokit connected successfully (status: ${status})`);

    // Test Axios
    console.log('\n🔌 Testing HTTP client...');
    const response = await axios.get('https://api.github.com');
    console.log(`✅ Axios working correctly (status: ${response.status})`);

    console.log('\n✨ All dependencies verified successfully!');

  } catch (error) {
    console.error('\n❌ Setup test failed:', error);
    process.exit(1);
  }
}

testSetup();
</file>

<file path="src/test-setup.ts">
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { chromium } from 'playwright';
import { Octokit } from '@octokit/rest';
import axios from 'axios';
import dotenv from 'dotenv';
async function testSetup() {
  try {
    console.log('🔍 Starting dependency verification...\n');
    // Test dotenv first to load environment variables
    dotenv.config();
    console.log('✅ dotenv loaded successfully');
    // Test MCP SDK
    const server = new Server({
      name: "test-server",
      version: "1.0.0"
    }, {
      capabilities: {
        resources: {},
        tools: {}
      }
    });
    console.log('✅ MCP SDK initialized successfully');
    // Test Playwright
    console.log('\n🌐 Testing browser automation...');
    const browser = await chromium.launch();
    await browser.close();
    console.log('✅ Playwright working correctly');
    // Test Octokit
    console.log('\n📦 Testing GitHub integration...');
    const octokit = new Octokit();
    const { status } = await octokit.rest.meta.root();
    console.log(`✅ Octokit connected successfully (status: ${status})`);
    // Test Axios
    console.log('\n🔌 Testing HTTP client...');
    const response = await axios.get('https://api.github.com');
    console.log(`✅ Axios working correctly (status: ${response.status})`);
    console.log('\n✨ All dependencies verified successfully!');
  } catch (error) {
    console.error('\n❌ Setup test failed:', error);
    process.exit(1);
  }
}
testSetup();
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
</file>

</files>
