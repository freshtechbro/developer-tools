---
description: Architecture Mode
globs: 
alwaysApply: false
---
# Architecture
When asked to enter "Architecture Mode" to the following:

Use Cursor-tools repo Gemini to deeply reflect upon the changes being asked and analyze existing code to map the full scope of changes needed.

Ask Gemini to think deeply about the scale of what we're trying to build so we understand how we need to design the system. Generate a 5 paragraph tradeoff analysis of the different ways we could design the system considering the constraints, scale, performance considerations and requirements.

Before proposing a plan, Ask Perplexity 4-6 clarifying questions based on your findings to assess the scale of the system we're trying to build. 

Once answered, Ask Gemini to draft a comprehensive system design architecture.

Ask Gemini to review the system design architecture and to score it on the scale of 1 to 10 on how good it is. 

If the score is less than 10/10, ask Gemini to make changes to areas that need change in the system design architecture to make the score 10/10. Ask Gemini to review again. Do the review iteratively until the score is 10/10 after which you approve the system design.

If feedback or questions are provided, engage in a conversation to analyze tradeoffs further and revise the plan - once revised, ask for Gemini approval again. 

Once approved, work on a plan to implement the architecture based on the provided requirements.

If feedback is provided, revise the plan and ask for approval again. Once approved, implement all steps in that plan. After completing each phase/step, mention what was just completed and what the next steps are + phases remaining after these steps

# Monorepo Reorganization Complete

I've completed the necessary steps to enhance your project structure. Here's a summary of what's been accomplished:

## 1. Fixed TypeScript Configuration

Fixed the project references in TypeScript configuration by adding `composite: true` to the shared package tsconfig.json.

## 2. Import Path Management

Created a script (`scripts/update-imports.js`) to update import paths throughout the codebase to use the new package structure. This script:
- Maps old relative imports to new package imports
- Can be run via `npm run update-imports`
- Targets all TypeScript and JavaScript files in packages, tools, and resources directories

## 3. Build System Setup

Set up a comprehensive build system for the monorepo:
- Created a build script (`scripts/build.js`) that builds packages in the correct order (shared → server → client)
- Added build commands to package.json:
  - `npm run build`: Builds all packages 
  - `npm run build:watch`: Watches for changes and rebuilds automatically

## 4. Testing Configuration

Configured testing for the monorepo:
- Updated Jest configuration to support the monorepo structure with project references
- Created separate test commands for each package
- Set up test coverage reporting
- Updated the test setup file to include common mocks and configurations
- Added more test scripts to package.json:
  - `npm test`: Runs all tests
  - `npm run test:shared`, `npm run test:server`, `npm run test:client`: Test individual packages
  - `npm run test:watch`: Watch mode for tests
  - `npm run test:coverage`: Generate coverage reports

## 5. CI/CD Pipeline

Set up a CI/CD pipeline using GitHub Actions:
- Created a workflow file (`.github/workflows/ci.yml`) that:
  - Builds, tests, and lints the code on every push and pull request
  - Deploys to development on push to main branch
  - Uploads coverage reports to Codecov

## 6. Documentation Updates

Enhanced the project documentation:
- Created a detailed development workflow guide (`docs/development-workflow.md`)
- Updated the main README with references to the new documentation
- Added a CHANGELOG.md to track project changes

## Next Steps

To complete the transition to the new monorepo structure:

1. **Run the Import Path Updater**: 
   ```
   npm run update-imports
   ```

2. **Build the Project**: 
   ```
   npm run build
   ```

3. **Run Tests to Verify**: 
   ```
   npm test
   ```

4. **Commit Changes**: 
   Commit all these changes to version control with a descriptive message about the reorganization.

The project is now structured as a proper monorepo with shared code, proper build order, comprehensive testing, and CI/CD pipeline integration. This structure will make it easier to maintain and extend the project in the future.